'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _gulpUtil = require('gulp-util');

var _gulpUtil2 = _interopRequireDefault(_gulpUtil);

var _through2 = require('through2');

var _through22 = _interopRequireDefault(_through2);

var _stylestats = require('stylestats');

var _stylestats2 = _interopRequireDefault(_stylestats);

var _stylestatsLibFormat = require('stylestats/lib/format');

var _stylestatsLibFormat2 = _interopRequireDefault(_stylestatsLibFormat);

exports['default'] = function () {
  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  return _through22['default'].obj(function (file, encode, callback) {
    var _this = this;

    if (file.isNull()) {
      this.push(file);
      return callback();
    }

    if (file.isStream()) {
      this.emit('error', new _gulpUtil2['default'].PluginError('gulp-stylestats', 'Streaming is not supported'));
      return callback();
    }

    var config = options.config;
    var stylestats = new _stylestats2['default'](file.path, config);

    stylestats.parse(function (error, result) {

      if (error) {
        _this.push(file);
        return callback(new _gulpUtil2['default'].PluginError('gulp-stylestats', error, {
          fileName: file.path
        }));
      }

      var format = new _stylestatsLibFormat2['default'](result);
      var extension = undefined;
      var method = undefined;

      switch (options.type) {
        case 'json':
          extension = '.json';
          method = 'toJSON';
          break;
        case 'csv':
          extension = '.csv';
          method = 'toCSV';
          break;
        case 'html':
          extension = '.html';
          method = 'toHTML';
          break;
        case 'md':
          extension = '.md';
          method = 'toMarkdown';
          break;
        case 'template':
          format.setTemplate(_fs2['default'].readFileSync(options.templateFile, {
            encoding: 'utf8'
          }));
          extension = options.extension || '.html';
          method = 'parseTemplate';
          break;
        default:
          extension = '.txt';
          method = 'toTable';
          break;
      }

      format[method](function (data) {
        if (options.outfile) {
          file.contents = new Buffer(data);
          file.path = _gulpUtil2['default'].replaceExtension(file.path, extension);
        } else {
          console.log(data);
        }

        _this.push(file);
        callback();
        return;
      });
    });
  }, function (callback) {
    return callback();
  });
};

module.exports = exports['default'];